<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" >
    <meta name="viewport" content="width=device-width, initial-scale=1.0" >
    <meta name="theme-color" content="#2196f3" >
    <link rel="manifest" href="/manifest.json">
    <title>Sem-Store| IITGN</title>

    <link rel="icon" type="image/png" href="/icons/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg" />
    <link rel="shortcut icon" href="/icons/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="SemStore" />


    <!-- Tailwind CSS CDN -->
    <link href="/src/Style.css" rel="stylesheet">
<!--        <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>-->
    <!-- Optional: Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

</head>

<body class="min-h-screen  flex flex-col text-gray-800">
<%- include("navbar.ejs")%>
<!-- Loader Overlay -->
<div class="hidden" id="loader">
    <div  class=" fixed inset-0 bg-white/60 backdrop-blur-sm z-50 flex items-center justify-center">
        <div class="w-12 h-12 border-4 border-t-transparent border-r-blue-600 border-l-blue-600 border-b-blue-600   rounded-full animate-spin"></div>
    </div>
</div>

<main class="flex-grow p-6 ">

    <form  action="javascript:void(0)">
        <div class="flex flex-row justify-center gap-4">
            <div class="flex w-full max-w-md sm:flex">
                <input
                        type="text"
                        name="search"
                        id="search"
                        placeholder="Search... MA104"
                        class="pl-3 pr-10 py-2 w-full border border-gray-300 rounded-l-lg bg-gray-50 focus:outline-none focus:border-black text-sm"
                >
                <button
                        type="submit"
                        class="bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700 transition flex items-center justify-center "
                        aria-label="Search"
                ><svg
                            class="w-5 h-5"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                    >
                        <path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z"/>
                    </svg>
                </button>
            </div>

            <div class="hidden sm:block" >
                <select id="sem" name="sem" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" hidden disabled selected>Semester</option>
                    <option value="" >None</option>
                    <option value="sem1">Semester-1</option>
                    <option value="sem2">Semester-2</option>
                </select>
            </div>

            <div class="hidden sm:block" >
                <select id="branch" name="branch" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Select your branch</option>
                    <option value="" >None</option>
                    <option value="CSE">CSE</option>
                    <option value="AI">AI</option>
                    <option value="EE">EE</option>
                    <option value="ICD">ICDT</option>
                    <option value="ME">ME</option>
                    <option value="CH">CH</option>
                    <option value="CE">CE</option>
                    <option value="MSE">MSE</option>
                </select>
            </div>
            <div class="hidden sm:block">
<!--                apply filter-->
<!--                <button-->
<!--                        type="button"-->
<!--                        class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-semibold transition"-->
<!--                >-->
<!--                    <svg-->
<!--                            class="w-4 h-4"-->
<!--                            fill="none"-->
<!--                            stroke="currentColor"-->
<!--                            stroke-width="2"-->
<!--                            stroke-linecap="round"-->
<!--                            stroke-linejoin="round"-->
<!--                            viewBox="0 0 24 24"-->
<!--                    >-->
<!--                        <path d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-.293.707L14 13.414V19a1 1 0 01-1.447.894l-4-2A1 1 0 018 17v-3.586L3.293 6.707A1 1 0 013 6V4z" />-->
<!--                    </svg>-->
<!--                    Apply Filter-->
<!--                </button>-->
                <select id="order" name="order" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Popularity</option>
                    <option value="-1">Descending</option>
                    <option value="1">Ascending</option>
                </select>

            </div>
            <div class="block sm:hidden" >

                <button
                        type="button"
                        class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-semibold transition"
                        onclick="document.getElementById('mobileFilter').classList.toggle('hidden')"
                >
                    <svg viewBox="0 0 15 15" fill="currentColor" stroke="currentColor"
                         stroke-width="2"   class="w-4 h-4">
                        <path d="M6.666666666666666 12h2.6666666666666665v-1.3333333333333333h-2.6666666666666665v1.3333333333333333ZM2 4v1.3333333333333333h12V4H2Zm2 4.666666666666666h8v-1.3333333333333333H4v1.3333333333333333Z" stroke-width="0.6667"></path>
                    </svg>
                    More Filter
                </button>

            </div>

        </div>
        <div class="flex flex-col gap-4 p-4 bg-white rounded-2xl shadow-md border border-gray-200 hidden sm:hidden" id="mobileFilter">
            <div class="block" >
                <select id="sem-mobile" name="sem" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" hidden disabled selected>Semester</option>
                    <option value="" >None</option>
                    <option value="sem1">Semester-1</option>
                    <option value="sem2">Semester-2</option>
                </select>
            </div>

            <div class="block" >
                <select id="branch-mobile" name="branch" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Select your branch</option>
                    <option value="" >None</option>
                    <option value="CSE">CSE</option>
                    <option value="AI">AI</option>
                    <option value="EE">EE</option>
                    <option value="ICD">ICDT</option>
                    <option value="ME">ME</option>
                    <option value="CH">CH</option>
                    <option value="CE">CE</option>
                    <option value="MSE">MSE</option>
                </select>
            </div>
            <div class="block" >
<!--                <button-->
<!--                        type="button"-->
<!--                        class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-semibold transition"-->
<!--                >-->
<!--                    <svg-->
<!--                            class="w-4 h-4"-->
<!--                            fill="none"-->
<!--                            stroke="currentColor"-->
<!--                            stroke-width="2"-->
<!--                            stroke-linecap="round"-->
<!--                            stroke-linejoin="round"-->
<!--                            viewBox="0 0 24 24"-->
<!--                    >-->
<!--                        <path d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-.293.707L14 13.414V19a1 1 0 01-1.447.894l-4-2A1 1 0 018 17v-3.586L3.293 6.707A1 1 0 013 6V4z" />-->
<!--                    </svg>-->
<!--                    Apply Filter-->
<!--                </button>-->
                <select id="order-mobile" name="order" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Popularity</option>
                    <option value="-1">Descending</option>
                    <option value="1">Ascending</option>
                </select>

            </div>
        </div>
    </form>

    <div class="p-5 h-screen" >


        <div class="overflow-auto rounded-lg shadow hidden md:block">
            <table class="w-full">
                <thead class="bg-gray-50 border-b-2 border-gray-200">
                <tr>
                    <th class="w-20 p-3 text-sm font-semibold tracking-wide text-left">Course Code</th>
                    <th class=" p-3 text-sm font-semibold tracking-wide text-left">Title</th>
                    <th class="p-3 text-sm font-semibold tracking-wide text-left">Description</th>
                    <th class="w-24 p-3 text-sm font-semibold tracking-wide text-left">Type</th>
                    <th class="w-24 p-3 text-sm font-semibold tracking-wide text-left">Uploaded By</th>
                    <th class="w-32 p-3 text-sm font-semibold tracking-wide text-left">Time</th>
                    <th class="w-32 p-3 text-sm font-semibold tracking-wide text-left">Available Offline</th>
                </tr>
                </thead>
                <tbody class="divide-y divide-gray-100" id="results">


<!--                <tr class="bg-white hover:bg-gray-200 text-gray-700 " >-->

<!--                    <td class="p-3 text-sm  whitespace-nowrap font-medium"  >ES116</td>-->
<!--                    <td class="p-3 text-sm  whitespace-nowrap" ><a href="#">Cedra and Smith</a></td>-->
<!--                    <td class="p-3 text-sm  whitespace-nowrap" >Book For First year chapters</td>-->
<!--                    <td class="p-3 text-sm  whitespace-nowrap" >PDF</td>-->
<!--                    <td class="p-3 text-sm  whitespace-nowrap" >Ishaan Kamath</td>-->
<!--                    <td class="p-3 text-sm  whitespace-nowrap" >May 28</td>-->

<!--                    <td>-->
<!--                        <div class="flex flex-row gap-6">-->
<!--                            <button type="button" class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition"><svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg></button>-->
<!--                            <img src="images/tick.png" alt="is available offline">-->
<!--                        </div>-->

<!--                    </td>-->
<!--                </tr>-->


                </tbody>
            </table>
        </div>


        <div class="grid grid-cols-1 gap-4 md:hidden" id="resultsmobile">


<!--            <div class="bg-white hover:bg-gray-200 p-3 rounded-lg shadow space-y-2 text-sm">-->
<!--                <div class="flex items-center justify-between">-->
<!--                    <a href="#">-->
<!--                        <div class="flex flex-row space-x-2 ">-->
<!--                            <span class="font-semibold text-gray-800">ES116</span>-->
<!--                            <span class="text-gray-600 text-xs">Cedra and Smith</span>-->
<!--                        </div>-->
<!--                    </a>-->
<!--                    <button type="button" class="flex items-center gap-2 bg-gray-400 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition"><img src="images/makeOffline.png" style="width:15px;height:15px;">-->
<!--                        Available Offline-->
<!--                    </button>-->
<!--                </div>-->
<!--                <a href="#">-->
<!--                    <p class="text-gray-700 text-sm">Book for First Year Chapters</p>-->
<!--                    <div class="flex flex-wrap items-center gap-2 text-xs text-gray-600">-->
<!--                        <span class="px-2 py-0.5 bg-gray-300 text-gray-800 rounded-full text-[11px] font-medium">PDF</span>-->
<!--                        <span>By: Ishaan Kamath</span>-->
<!--                        <span>28 May</span>-->
<!--                    </div>-->
<!--                </a>-->
<!--            </div>-->
        </div>

    </div>
</main>



<script type="module">
    import { openDB } from 'https://cdn.jsdelivr.net/npm/idb@8/+esm';
    import { findFile } from '/js/db.js';
    import { saveFile } from '/js/db.js';
    async function syncIDBWithCache() {
        const db = await openDB('test-db', 5);

        const allFiles = await db.getAll('fileData');
        const cache = await caches.open('offline-files');

        // First find which IDs need to be deleted
        const idsToDelete = [];

        for (const file of allFiles) {
            const cachedResponse = await cache.match(file.link);
            if (!cachedResponse) {
                console.warn(`SW: Cache missing for ${file.link}, marking for removal`);
                idsToDelete.push(file.id);
            }
        }

        // Now open transaction and delete them
        const tx = db.transaction('fileData', 'readwrite');
        const store = tx.objectStore('fileData');
        for (const id of idsToDelete) {
            store.delete(id);
        }

        await tx.done;
        // window.location.reload();
        console.log("SW: IDB-cache sync complete.");
    }

    syncIDBWithCache().then(initApp).catch(console.error);

    async function initApp()
    {


    console.log(window.innerWidth)
    const isMobile = window.innerWidth < 640;
    const searchInput = document.getElementById('search');
    const semesterSelect = document.getElementById(isMobile ? 'sem-mobile' : 'sem');
    const branchSelect = document.getElementById(isMobile ? 'branch-mobile' : 'branch');
    const orderSelect = document.getElementById(isMobile ? 'order-mobile' : 'order');
    const resultsContainer = document.getElementById('results'); // Create this div or UL for results
    const resultsContainer2 = document.getElementById('resultsmobile');

    let debounceTimeout;

    function fetchResults() {
        const form = document.querySelector('form');
        const formData = new FormData(form);

        const query = formData.get('search') || '';
        const semester = formData.get('sem') || '';
        const branch = formData.get('branch') || '';
        const order = formData.get('order') || '-1';
        console.log("Contents:",query,semester,branch,order);
        const params = new URLSearchParams({
            q: query,
            semester,
            branch,
            order
        });
        console.log(params)




        fetch(`/Home/Search?${params}`)
            .then(res => res.json())
            .then(async data => {
                // Map to an array of promises resolving to strings
                const rows = await Promise.all(data.map(async resource => {
                    const exists = await findFile(resource._id);
                    console.log(exists);
                    if (exists) {
                        // offline version
                        return `
          <tr class="text-gray-700 bg-white hover:bg-gray-200">
            <td class="p-3 text-sm whitespace-nowrap font-medium">${resource.coursecode}</td>
            <td class="p-3 text-sm whitespace-nowrap"><a href="${resource.path}">${resource.title}</a></td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.description}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.type}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedBy}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedAt}</td>
            <td>
              <div class="flex flex-row gap-6">
                <button disabled type="button" onclick="dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this ,'${resource._id}');" id="cache-btn" class="flex items-center gap-2 bg-gray-400 text-white px-3 py-1.5 rounded-lg text-sm font-medium">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>
                </button>
                <img src="images/tick.png" alt="Available offline" style="width:30px;height:30px;">
              </div>
            </td>
          </tr>`;
                    } else {
                        // not offline version
                        return `
          <tr class="text-gray-700 bg-white hover:bg-gray-200">
            <td class="p-3 text-sm whitespace-nowrap font-medium">${resource.coursecode}</td>
            <td class="p-3 text-sm whitespace-nowrap"><a href="${resource.path}">${resource.title}</a></td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.description}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.type}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedBy}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedAt}</td>
            <td>
              <div class="flex flex-row gap-6">
                <button type="button" onclick="dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this ,'${resource._id}');" id="cache-btn" class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>
                </button>
                <img src="images/untick.png" alt="Not available offline" style="width:30px;height:30px;">
              </div>
            </td>
          </tr>`;
                    }
                }));

                resultsContainer.innerHTML = rows.join('');
                const rows2 = await Promise.all(data.map(async resource => {
                    const exists = await findFile(resource._id);
                    console.log(exists);
                    if (exists) {
                                    //offline
                                    return `
                        <div class="bg-white hover:bg-gray-200 p-3 rounded-lg shadow space-y-2 text-sm">
                        <div class="flex items-center justify-between">
                            <a href="${resource.path}">
                                <div class="flex flex-row space-x-2 ">
                                    <span class="font-semibold text-gray-800">${resource.coursecode}</span>
                                    <span class="text-gray-600 text-xs">${resource.title}</span>
                                </div>
                            </a>
                            <button type="button" onclick="dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this,'${resource._id}');"  class="flex items-center gap-2 bg-gray-400 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition"><svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>
                                 Available Offline
                            </button>
                        </div>
                        <a href="${resource.path}">
                            <p class="text-gray-700 text-sm">${resource.description}</p>
                            <div class="flex flex-wrap items-center gap-2 text-xs text-gray-600">
                                <span class="px-2 py-0.5 bg-gray-300 text-gray-800 rounded-full text-[11px] font-medium">${resource.type}</span>
                                <span>Uploaded By: ${resource.uploadedBy}</span>
                                <span>${resource.uploadedAt}</span>
                            </div>
                        </a>
                    </div>`

                                } else {
                                    //not offline
                                    return `
                        <div class="bg-white hover:bg-gray-200 p-3 rounded-lg shadow space-y-2 text-sm">
                        <div class="flex items-center justify-between">
                            <a href="${resource.path}">
                                <div class="flex flex-row space-x-2 ">
                                    <span class="font-semibold text-gray-800">${resource.coursecode}</span>
                                    <span class="text-gray-600 text-xs">${resource.title}</span>
                                </div>
                            </a>
                            <button type="button" onclick="dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this,'${resource._id}');"  class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition"><svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>
                                Make Available Offline
                            </button>
                        </div>
                        <a href="${resource.path}">
                            <p class="text-gray-700 text-sm">${resource.description}</p>
                            <div class="flex flex-wrap items-center gap-2 text-xs text-gray-600">
                                <span class="px-2 py-0.5 bg-gray-300 text-gray-800 rounded-full text-[11px] font-medium">${resource.type}</span>
                                <span>Uploaded By: ${resource.uploadedBy}</span>
                                <span>${resource.uploadedAt}</span>
                            </div>
                        </a>
                    </div>`
                                }
                }));

                resultsContainer2.innerHTML = rows2.join('');

            });
    }

    function debounce(fn, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => fn.apply(this, args), delay);
        };
    }

    fetchResults();
    const debouncedFetchResults = debounce(fetchResults, 300);
    searchInput?.addEventListener('input', debouncedFetchResults);
    semesterSelect?.addEventListener('change', fetchResults);
    branchSelect?.addEventListener('change', fetchResults);
    orderSelect?.addEventListener('change', fetchResults);

    document.querySelector('form').addEventListener('submit', e => {
        e.preventDefault(); // prevent reload
        // console.log("feth")
        fetchResults();     // trigger fetch manually if user presses Enter or clicks button
    });
    function showLoader() {
        document.getElementById('loader').classList.remove('hidden');
    }

    function hideLoader() {
        document.getElementById('loader').classList.add('hidden');
    }
    async function cachefile(fileId,fileTitle,btn,ID) {
        try {
            showLoader();
            // 1. Get the filename from backend
            const response = await fetch(`/api/file/${fileId}`);
            const { fileName } = await response.json();

            const fileUrl = `/contents/${fileName}`; // Custom cache key
            saveFile({title:fileTitle,link:fileUrl,oid:ID});
            // 2. Fetch the actual file content
            const fileResponse = await fetch(`${fileUrl}`); // real file path
            if (!fileResponse.ok) throw new Error("Failed to fetch file");

            // 3. Cache with friendly name
            const cache = await caches.open("offline-files");
            await cache.put(fileUrl, fileResponse.clone());
            const res=await fetch(`/delete/${fileName}`, { method: 'POST' });

            const img = btn.parentElement.querySelector('img');
            if (img) {
                img.src = 'images/tick.png';
                img.alt = 'Available offline';
            } else {
                // No img found (mobile?), update button text instead
                btn.textContent = "Available Offline";
            }
            btn.disabled=true;
            btn.classList.remove('bg-blue-600', 'hover:bg-blue-700' ,'transition');
            btn.classList.add('bg-gray-400');
            console.log("✅ File cached as:", fileUrl,"\n And deletion from local :",res);

        } catch (err) {
            console.error("❌ Failed to cache file:", err);
        }finally {
            hideLoader();
        }
    }
    window.cachefile = cachefile;


    function extractDriveId(url) {
        const patterns = [
            /\/d\/([a-zA-Z0-9_-]+)/,             // /d/FILE_ID
            /id=([a-zA-Z0-9_-]+)/,               // id=FILE_ID
            /\/folders\/([a-zA-Z0-9_-]+)/        // /folders/FOLDER_ID
        ];

        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match && match[1]) return match[1];
        }

        return null; // No ID found
    }
    window.extractDriveId = extractDriveId;
    }
</script>
<%- include("footer.ejs")%>
</body>

</html>

