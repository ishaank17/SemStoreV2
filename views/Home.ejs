<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" >
    <meta name="viewport" content="width=device-width, initial-scale=1.0" >
    <meta name="theme-color" content="#2196f3" >
    <link rel="manifest" href="/manifest.json">
    <title>Sem-Store| IITGN</title>

    <link rel="icon" type="image/png" href="/icons/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg" />
    <link rel="shortcut icon" href="/icons/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="SemStore" />

    <script src="/js/getSub.js"></script>
    <!-- Tailwind CSS CDN -->
    <link href="/src/new.css" rel="stylesheet">
<!--        <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>-->
    <!-- Optional: Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
<!--    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">&lt;!&ndash;!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.&ndash;&gt;<path d="M119.4 44.1c23.3-3.9 46.8-1.9 68.6 5.3l49.8 77.5-75.4 75.4c-1.5 1.5-2.4 3.6-2.3 5.8s1 4.2 2.6 5.7l112 104c2.9 2.7 7.4 2.9 10.5 .3s3.8-7 1.7-10.4l-60.4-98.1 90.7-75.6c2.6-2.1 3.5-5.7 2.4-8.8L296.8 61.8c28.5-16.7 62.4-23.2 95.7-17.6C461.5 55.6 512 115.2 512 185.1l0 5.8c0 41.5-17.2 81.2-47.6 109.5L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9L47.6 300.4C17.2 272.1 0 232.4 0 190.9l0-5.8c0-69.9 50.5-129.5 119.4-141z"/></svg>-->
<!--dislike-->
</head>
<script type="module">
    import {dbPromise} from '/js/db.js';
    const courses='<%=courseCodes%>';
    const cList=courses.split(",");
    const db= await dbPromise;
    const follows=await db.getAll('followData');
    for(const follow of follows) {
        if(!cList.includes(follow.code)){
            await db.delete("followData",follow.id);
        }
    }
</script>
<body class="min-h-screen  flex flex-col text-gray-800">
<%- include("navbar.ejs")%>
<!-- Loader Overlay -->
<div class="hidden" id="loader">
    <div  class=" fixed inset-0 bg-white/60 backdrop-blur-sm z-50 flex items-center justify-center">
        <div class="w-12 h-12 border-4 border-t-transparent border-r-blue-600 border-l-blue-600 border-b-blue-600   rounded-full animate-spin"></div>
    </div>
</div>

<main class="flex-grow p-6 ">

    <form  action="javascript:void(0)">
        <div class="flex flex-row justify-center gap-4">
            <div class="flex w-full max-w-md sm:flex">
                <input
                        type="text"
                        name="search"
                        id="search"
                        placeholder="Search... MA104"
                        class="pl-3 pr-10 py-2 w-full border border-gray-300 rounded-l-lg bg-gray-50 focus:outline-none focus:border-black text-sm"
                >
                <button
                        type="submit"
                        class="bg-blue-600 text-white p-2 rounded-r-lg hover:bg-blue-700 transition flex items-center justify-center "
                        aria-label="Search"
                ><svg
                            class="w-5 h-5"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                    >
                        <path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z"/>
                    </svg>
                </button>
            </div>

            <div class="hidden sm:block" >
                <select id="sem" name="sem" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" hidden disabled selected>Semester</option>
                    <option value="" >None</option>
                    <option value="sem1">Semester-1</option>
                    <option value="sem2">Semester-2</option>
                </select>
            </div>

            <div class="hidden sm:block" >
                <select id="branch" name="branch" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Select your branch</option>
                    <option value="" >None</option>
                    <option value="CSE">CSE</option>
                    <option value="AI">AI</option>
                    <option value="EE">EE</option>
                    <option value="ICD">ICDT</option>
                    <option value="ME">ME</option>
                    <option value="CH">CH</option>
                    <option value="CE">CE</option>
                    <option value="MSE">MSE</option>
                </select>
            </div>
            <div class="hidden sm:block">
<!--                apply filter-->
<!--                <button-->
<!--                        type="button"-->
<!--                        class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-semibold transition"-->
<!--                >-->
<!--                    <svg-->
<!--                            class="w-4 h-4"-->
<!--                            fill="none"-->
<!--                            stroke="currentColor"-->
<!--                            stroke-width="2"-->
<!--                            stroke-linecap="round"-->
<!--                            stroke-linejoin="round"-->
<!--                            viewBox="0 0 24 24"-->
<!--                    >-->
<!--                        <path d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-.293.707L14 13.414V19a1 1 0 01-1.447.894l-4-2A1 1 0 018 17v-3.586L3.293 6.707A1 1 0 013 6V4z" />-->
<!--                    </svg>-->
<!--                    Apply Filter-->
<!--                </button>-->
                <select id="order" name="order" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Popularity</option>
                    <option value="-1">Descending</option>
                    <option value="1">Ascending</option>
                </select>

            </div>
            <div class="block sm:hidden" >

                <button
                        type="button"
                        class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-semibold transition"
                        onclick="document.getElementById('mobileFilter').classList.toggle('hidden')"
                >
                    <svg viewBox="0 0 15 15" fill="currentColor" stroke="currentColor"
                         stroke-width="2"   class="w-4 h-4">
                        <path d="M6.666666666666666 12h2.6666666666666665v-1.3333333333333333h-2.6666666666666665v1.3333333333333333ZM2 4v1.3333333333333333h12V4H2Zm2 4.666666666666666h8v-1.3333333333333333H4v1.3333333333333333Z" stroke-width="0.6667"></path>
                    </svg>
                    More Filter
                </button>

            </div>

        </div>
        <div class="flex flex-col gap-4 p-4 bg-white rounded-2xl shadow-md border border-gray-200 hidden sm:hidden" id="mobileFilter">
            <div class="block" >
                <select id="sem-mobile" name="sem" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" hidden disabled selected>Semester</option>
                    <option value="" >None</option>
                    <option value="sem1">Semester-1</option>
                    <option value="sem2">Semester-2</option>
                </select>
            </div>

            <div class="block" >
                <select id="branch-mobile" name="branch" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Select your branch</option>
                    <option value="" >None</option>
                    <option value="CSE">CSE</option>
                    <option value="AI">AI</option>
                    <option value="EE">EE</option>
                    <option value="ICD">ICDT</option>
                    <option value="ME">ME</option>
                    <option value="CH">CH</option>
                    <option value="CE">CE</option>
                    <option value="MSE">MSE</option>
                </select>
            </div>
            <div class="block" >
<!--                <button-->
<!--                        type="button"-->
<!--                        class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-semibold transition"-->
<!--                >-->
<!--                    <svg-->
<!--                            class="w-4 h-4"-->
<!--                            fill="none"-->
<!--                            stroke="currentColor"-->
<!--                            stroke-width="2"-->
<!--                            stroke-linecap="round"-->
<!--                            stroke-linejoin="round"-->
<!--                            viewBox="0 0 24 24"-->
<!--                    >-->
<!--                        <path d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-.293.707L14 13.414V19a1 1 0 01-1.447.894l-4-2A1 1 0 018 17v-3.586L3.293 6.707A1 1 0 013 6V4z" />-->
<!--                    </svg>-->
<!--                    Apply Filter-->
<!--                </button>-->
                <select id="order-mobile" name="order" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-black  w-full p-2 focus:outline-none ">
                    <option value="" disabled selected hidden>Popularity</option>
                    <option value="-1">Descending</option>
                    <option value="1">Ascending</option>
                </select>

            </div>
        </div>
    </form>

    <div class="p-5 h-screen" >


        <div class="overflow-auto rounded-lg shadow hidden md:block">
            <table class="w-full">
                <thead class="bg-blue-200 text-blue-700 border-b-2 border-gray-200">
                <tr>
                    <th class="w-20 p-3 text-sm font-semibold tracking-wide text-left">Course Code</th>
                    <th class=" p-3 text-sm font-semibold tracking-wide text-left">Title</th>
                    <th class="p-3 text-sm font-semibold tracking-wide text-left">Description</th>
                    <th class="w-24 p-3 text-sm font-semibold tracking-wide text-left">Type</th>
                    <th class="w-24 p-3 text-sm font-semibold tracking-wide text-left">Uploaded By</th>
                    <th class="w-32 p-3 text-sm font-semibold tracking-wide text-left">Time</th>
                    <th class="w-32 p-3 text-sm font-semibold tracking-wide text-left">Available Offline</th>
                    <th class="w-32 p-3 text-sm font-semibold tracking-wide text-left">Actions</th>
                </tr>
                </thead>
                <tbody class="divide-y divide-gray-100" id="results">

                </tbody>
            </table>
        </div>


        <div class="grid grid-cols-1 gap-4 md:hidden" id="resultsmobile">

        </div>

    </div>
</main>
<!-- Overlay -->
<div id="reportOverlay" class="fixed inset-0 backdrop-blur-sm  bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-xl w-96 shadow-xl">
        <h2 class="text-xl font-bold text-red-600 mb-4">Report Resource</h2>
        <form id="reportForm" >
            <input type="hidden" id="resourceId" >
            <input type="hidden" id="resourceCode" >
<!--            if ur reading this dont mess with this else ur computer will go booooooom 💥💥💥-->
            <label class="block mb-2 font-semibold text-gray-700">Reason:</label>
            <select id="reportReason" class="w-full border rounded p-2 mb-4">
                <option hidden disabled selected value="Other">Choose a option</option>
                <option >Inappropriate Content</option>
                <option >Broken Link</option>
                <option>Outdated Content</option>
                <option >Other</option>
            </select>
            <textarea id="reportDetails" class="w-full border rounded p-2 mb-4" placeholder="Additional details " rows="3" required></textarea>
            <div class="flex justify-between">
                <button type="button" onclick="closeReportOverlay()" class="text-gray-500 hover:underline">Cancel</button>
                <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">Submit</button>
            </div>
        </form>
    </div>
</div>
<script>
    function openReportOverlay(id,code){
        document.getElementById('reportOverlay').classList.remove('hidden');
        document.getElementById('resourceId').value = id;
        document.getElementById('resourceCode').value = code;
    }
    function closeReportOverlay() {
        document.getElementById('reportOverlay').classList.add('hidden');
    }
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('reportForm');
        form.addEventListener('submit', submitReport);
    });

    async function submitReport(e){
        e.preventDefault();
        const id = document.getElementById('resourceId').value;
        const reason = document.getElementById('reportReason').value;
        const details = document.getElementById('reportDetails').value;
        const code=document.getElementById("resourceCode").value;

        try {

            await fetch('/ReportResource', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id,code, reason, details }),
                credentials: 'include',
            });
            alert('Report submitted successfully!');

        } catch (e) {
            alert('Failed to submit report.');
        }

        closeReportOverlay();
    }
</script>

<script type="module">

    import { findFile } from '/js/db.js';
    import { saveFile } from '/js/db.js';
    import { followCode } from '/js/follow.js';
    import { findFollow } from '/js/follow.js';
    import { unfollowCode } from '/js/follow.js';
    import {dbPromise} from '/js/db.js';
    async function syncIDBWithCache() {
        const db = await dbPromise ;

        const allFiles = await db.getAll('fileData');
        const cache = await caches.open('offline-files');

        // First find which IDs need to be deleted
        const idsToDelete = [];

        for (const file of allFiles) {
            const cachedResponse = await cache.match(file.link);
            if (!cachedResponse) {
                console.warn(`SW: Cache missing for ${file.link}, marking for removal`);
                idsToDelete.push(file.id);
            }
        }

        // Now open transaction and delete them
        const tx = db.transaction('fileData', 'readwrite');
        const store = tx.objectStore('fileData');
        for (const id of idsToDelete) {
            store.delete(id);
        }

        await tx.done;
        // window.location.reload();
        console.log("SW: IDB-cache sync complete.");
    }

    syncIDBWithCache().then(initApp).catch(console.error);

    async function initApp()
    {


    console.log(window.innerWidth)
    const isMobile = window.innerWidth < 640;
    const searchInput = document.getElementById('search');
    const semesterSelect = document.getElementById(isMobile ? 'sem-mobile' : 'sem');
    const branchSelect = document.getElementById(isMobile ? 'branch-mobile' : 'branch');
    const orderSelect = document.getElementById(isMobile ? 'order-mobile' : 'order');
    const resultsContainer = document.getElementById('results'); // Create this div or UL for results
    const resultsContainer2 = document.getElementById('resultsmobile');

    let debounceTimeout;

    function fetchResults() {
        const form = document.querySelector('form');
        const formData = new FormData(form);

        const query = formData.get('search') || '';
        const semester = formData.get('sem') || '';
        const branch = formData.get('branch') || '';
        const order = formData.get('order') || '-1';
        console.log("Contents:",query,semester,branch,order);
        const params = new URLSearchParams({
            q: query,
            semester,
            branch,
            order
        });
        console.log("fetching" ,params)




        fetch(`/Home/Search?${params}`)
            .then(res => res.json())
            .then(async data => {
                console.log("Data received:", data);
                console.log("Data length:", data.length);
                // Map to an array of promises resolving to strings
                const rows = await Promise.all(data.map(async resource => {
                    const exists = await findFile(resource._id);
                    const isLiked = await findFollow(resource.coursecode);
                    console.log("Rendering:", resource.coursecode, "isLiked:", isLiked);
                    if (exists) {
                        return `
          <tr class="text-gray-700 bg-white hover:bg-gray-200">
            <td class="p-3 text-sm whitespace-nowrap font-medium">${resource.coursecode}</td>
            <td class="p-3 text-sm whitespace-nowrap"><a href="${resource.path}">${resource.title}</a></td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.description}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.type}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedBy}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedAt}</td>
            <td>
              <div class="flex flex-row gap-6">
                <button disabled type="button" onclick="dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this ,'${resource._id}');" id="cache-btn" class="flex items-center gap-2 bg-gray-400 text-white px-3 py-1.5 rounded-lg text-sm font-medium">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>
                </button>
                <img src="/images/tick.png" alt="Available offline" style="width:30px;height:30px;">
              </div>
            </td>
               <td class="p-3 text-sm whitespace-nowrap">
                    <div class="flex items-center gap-3">
                        ${isLiked
                            ? `<button onclick="deleteFollow('${resource.coursecode}')" title="Un-Follow Course" class="text-pink-600 hover:text-gray-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" fill="currentColor"><path d="M119.4 44.1c23.3-3.9 46.8-1.9 68.6 5.3l49.8 77.5-75.4 75.4c-1.5 1.5-2.4 3.6-2.3 5.8s1 4.2 2.6 5.7l112 104c2.9 2.7 7.4 2.9 10.5 .3s3.8-7 1.7-10.4l-60.4-98.1 90.7-75.6c2.6-2.1 3.5-5.7 2.4-8.8L296.8 61.8c28.5-16.7 62.4-23.2 95.7-17.6C461.5 55.6 512 115.2 512 185.1l0 5.8c0 41.5-17.2 81.2-47.6 109.5L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9L47.6 300.4C17.2 272.1 0 232.4 0 190.9l0-5.8c0-69.9 50.5-129.5 119.4-141z"/></svg>
                                </button>`
                            : `<button onclick="handleFollow('${resource.coursecode}')" title="Follow Course" class=" hover:text-pink-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24" fill="currentColor">
                                        <path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"/>
                                    </svg>
                                </button>`
                        }

                      <!-- Report Button -->
                      <button onclick="openReportOverlay('${resource._id}','${resource.coursecode}')"
                              class="text-red-500 hover:text-red-600"
                              title="Report Resource">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 512 512">
                          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z"/>
                        </svg>
                      </button>

                    </div>
                  </td>
                </tr>`;
                    } else {
                        // not offline version
                        return `
          <tr class="text-gray-700 bg-white hover:bg-gray-200">
            <td class="p-3 text-sm whitespace-nowrap font-medium">${resource.coursecode}</td>
            <td class="p-3 text-sm whitespace-nowrap"><a href="${resource.path}">${resource.title}</a></td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.description}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.type}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedBy}</td>
            <td class="p-3 text-sm whitespace-nowrap">${resource.uploadedAt}</td>
            <td>
              <div class="flex flex-row gap-6">
                <button type="button" onclick="dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this ,'${resource._id}');" id="cache-btn" class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>
                </button>
                <img src="/images/untick.png" alt="Not available offline" style="width:30px;height:30px;">
              </div>
            </td>
            <td class="p-3 text-sm whitespace-nowrap">
                <div class="flex items-center gap-3">
                    ${isLiked
                        ? `<button onclick="deleteFollow('${resource.coursecode}')" title="Un-Follow Course" class="text-pink-600 hover:text-gray-600">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" fill="currentColor"><path d="M119.4 44.1c23.3-3.9 46.8-1.9 68.6 5.3l49.8 77.5-75.4 75.4c-1.5 1.5-2.4 3.6-2.3 5.8s1 4.2 2.6 5.7l112 104c2.9 2.7 7.4 2.9 10.5 .3s3.8-7 1.7-10.4l-60.4-98.1 90.7-75.6c2.6-2.1 3.5-5.7 2.4-8.8L296.8 61.8c28.5-16.7 62.4-23.2 95.7-17.6C461.5 55.6 512 115.2 512 185.1l0 5.8c0 41.5-17.2 81.2-47.6 109.5L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9L47.6 300.4C17.2 272.1 0 232.4 0 190.9l0-5.8c0-69.9 50.5-129.5 119.4-141z"/></svg>
                            </button>`
                        : `<button onclick="handleFollow('${resource.coursecode}')" title="Follow Course" class=" hover:text-pink-600">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24" fill="currentColor">
                                    <path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"/>
                                </svg>
                            </button>`
                    }

                  <!-- Report Button -->
                  <button onclick="openReportOverlay('${resource._id}','${resource.coursecode}')" class="text-red-500 hover:text-red-600" title="Report Resource">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z"/></svg>
                  </button>

                </div>
            </td>
          </tr>`;
                    }
                }));

                resultsContainer.innerHTML = rows.join('');
                const rows2 = await Promise.all(data.map(async resource => {
                    const exists = await findFile(resource._id);
                    const isLiked = await findFollow(resource.coursecode);
                    console.log(exists);
                    if (exists) {
                                    //offline
                                    return `
                        <div class="bg-white hover:bg-gray-200 p-3 rounded-lg shadow space-y-2 text-sm">
                        <div class="flex items-center justify-between">
                            <a href="${resource.path}">
                                <div class="flex flex-row space-x-2 ">
                                    <span class="font-semibold text-gray-800">${resource.coursecode}</span>
<!--                                    <span class="text-gray-600 text-xs">${resource.title}</span>-->
                                </div>
                            </a>
                            <div class="flex gap-2">
                                ${isLiked
                                        ? `<button onclick="deleteFollow('${resource.coursecode}')" title="Un-Follow Course" class="text-pink-600 hover:text-gray-600">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" fill="currentColor"><path d="M119.4 44.1c23.3-3.9 46.8-1.9 68.6 5.3l49.8 77.5-75.4 75.4c-1.5 1.5-2.4 3.6-2.3 5.8s1 4.2 2.6 5.7l112 104c2.9 2.7 7.4 2.9 10.5 .3s3.8-7 1.7-10.4l-60.4-98.1 90.7-75.6c2.6-2.1 3.5-5.7 2.4-8.8L296.8 61.8c28.5-16.7 62.4-23.2 95.7-17.6C461.5 55.6 512 115.2 512 185.1l0 5.8c0 41.5-17.2 81.2-47.6 109.5L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9L47.6 300.4C17.2 272.1 0 232.4 0 190.9l0-5.8c0-69.9 50.5-129.5 119.4-141z"/></svg>
                            </button>`
                                        : `<button onclick="handleFollow('${resource.coursecode}')" title="Follow Course" class=" hover:text-pink-600">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24" fill="currentColor">
                                    <path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"/>
                                </svg>
                            </button>`
                                    }
                            <button onclick="openReportOverlay('${resource._id}','${resource.coursecode}')" class="text-red-500 hover:text-red-600" title="Report Resource">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z"/></svg>
                              </button>

                            <button disabled type="button" onclick=" dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this,'${resource._id}');"  class="flex items-center gap-2 bg-gray-400 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition">
<!--                                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>-->
                                Downloaded
                            </button>
                            </div>
                        </div>
                        <a href="${resource.path}">
                            <span class="text-black text-md">${resource.title}</span>
                            <p class="text-gray-700 text-sm">${resource.description}</p>
                            <div class="flex flex-wrap items-center gap-2 text-xs text-gray-600">
                                <span class="px-2 py-0.5 bg-gray-300 text-gray-800 rounded-full text-[11px] font-medium">${resource.type}</span>
                                <span>Uploaded By: ${resource.uploadedBy}</span>
                                <span>${resource.uploadedAt}</span>
                            </div>
                        </a>
                    </div>`

                                } else {
                                    //not offline
                                    return `
                        <div class="bg-white hover:bg-gray-200 p-3 rounded-lg shadow space-y-2 text-sm">
                        <div class="flex items-center justify-between">
                            <a href="${resource.path}">
                                <div class="flex flex-row space-x-2 ">
                                    <span class="font-semibold text-gray-800">${resource.coursecode}</span>
<!--                                    <span class="text-gray-600 text-xs">${resource.title}</span>-->
                                </div>
                            </a>
                            <div class="flex gap-2">
                                    ${isLiked
                                            ? `<button onclick="deleteFollow('${resource.coursecode}')" title="Un-Follow Course" class="text-pink-600 hover:text-gray-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" fill="currentColor"><path d="M119.4 44.1c23.3-3.9 46.8-1.9 68.6 5.3l49.8 77.5-75.4 75.4c-1.5 1.5-2.4 3.6-2.3 5.8s1 4.2 2.6 5.7l112 104c2.9 2.7 7.4 2.9 10.5 .3s3.8-7 1.7-10.4l-60.4-98.1 90.7-75.6c2.6-2.1 3.5-5.7 2.4-8.8L296.8 61.8c28.5-16.7 62.4-23.2 95.7-17.6C461.5 55.6 512 115.2 512 185.1l0 5.8c0 41.5-17.2 81.2-47.6 109.5L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9L47.6 300.4C17.2 272.1 0 232.4 0 190.9l0-5.8c0-69.9 50.5-129.5 119.4-141z"/></svg>
                                </button>`
                                            : `<button onclick="handleFollow('${resource.coursecode}')" title="Follow Course" class=" hover:text-pink-600">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24" fill="currentColor">
                                        <path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"/>
                                    </svg>
                                </button>`
                                        }
                                  <button onclick="openReportOverlay('${resource._id}','${resource.coursecode}')" class="text-red-500 hover:text-red-600" title="Report Resource">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z"/></svg>
                                  </button>
                                <button type="button" onclick="dwload(); cachefile(extractDriveId('${resource.path}'),'${resource.title}',this,'${resource._id}');"  class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-lg text-sm font-medium transition"><svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path d="M12 3v12m0 0l-4-4m4 4l4-4M5 20h14a1 1 0 001-1v-1a5 5 0 00-5-5H9a5 5 0 00-5 5v1a1 1 0 001 1z"/></svg>
                                    Offline
                                </button>
                            </div>
                        </div>
                        <a href="${resource.path}">
                            <span class="text-black text-md">${resource.title}</span>
                            <p class="text-gray-700 text-sm">${resource.description}</p>
                            <div class="flex flex-wrap items-center gap-2 text-xs text-gray-600">
                                <span class="px-2 py-0.5 bg-gray-300 text-gray-800 rounded-full text-[11px] font-medium">${resource.type}</span>
                                <span>Uploaded By: ${resource.uploadedBy}</span>
                                <span>${resource.uploadedAt}</span>
                            </div>
                        </a>
                    </div>`
                                }
                }));

                resultsContainer2.innerHTML = rows2.join('');

            });
    }

    function debounce(fn, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => fn.apply(this, args), delay);
        };
    }

    fetchResults();
    const debouncedFetchResults = debounce(fetchResults, 300);
    searchInput?.addEventListener('input', debouncedFetchResults);
    semesterSelect?.addEventListener('change', fetchResults);
    branchSelect?.addEventListener('change', fetchResults);
    orderSelect?.addEventListener('change', fetchResults);

    document.querySelector('form').addEventListener('submit', e => {
        e.preventDefault(); // prevent reload
        // console.log("feth")
        fetchResults();     // trigger fetch manually if user presses Enter or clicks button
    });








    function showLoader() {
        document.getElementById('loader').classList.remove('hidden');
    }
    window.showLoader = showLoader;

    function hideLoader() {
        document.getElementById('loader').classList.add('hidden');
    }
    window.hideLoader = hideLoader;
    async function cachefile(fileId,fileTitle,btn,ID) {
        try {
            showLoader();
            // 1. Get the filename from backend
            const response = await fetch(`/api/file/${fileId}`);
            const { fileName } = await response.json();

            const fileUrl = `/contents/${fileName}`; // Custom cache key
            saveFile({title:fileTitle,link:fileUrl,oid:ID});
            // 2. Fetch the actual file content
            const fileResponse = await fetch(`${fileUrl}`); // real file path
            if (!fileResponse.ok) throw new Error("Failed to fetch file");

            // 3. Cache with friendly name
            const cache = await caches.open("offline-files");
            await cache.put(fileUrl, fileResponse.clone());
            const res=await fetch(`/delete/${fileName}`, { method: 'POST' });

            const img = btn.parentElement.querySelector('img');
            if (img) {
                img.src = 'images/tick.png';
                img.alt = 'Available offline';
            } else {
                // No img found (mobile?), update button text instead
                btn.textContent = "Available Offline";
            }
            btn.disabled=true;
            btn.classList.remove('bg-blue-600', 'hover:bg-blue-700' ,'transition');
            btn.classList.add('bg-gray-400');
            console.log("✅ File cached as:", fileUrl,"\n And deletion from local :",res);

        } catch (err) {
            console.error("❌ Failed to cache file:", err);
        }finally {
            hideLoader();
        }
    }
    window.cachefile = cachefile;
    async function handleFollow(code){
    //update local db and incresee popularity of the respective coursecode
        await followCode(code);
        await fetch('/followCourse', {
            method: 'POST',
            body: JSON.stringify({ coursecode: code }),
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        }).then(response => {window.location.reload();});
    }
    window.handleFollow = handleFollow;

        //update local db and incresee popularity of the respective coursecode
        async function deleteFollow(code) {
            await unfollowCode(code); // local
            await fetch('/unfollowCourse', {
                method: 'POST',
                body: JSON.stringify({ coursecode: code }),
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            }).then(response => {window.location.reload();});
        }

    window.deleteFollow = deleteFollow;


    function extractDriveId(url) {
        const patterns = [
            /\/d\/([a-zA-Z0-9_-]+)/,             // /d/FILE_ID
            /id=([a-zA-Z0-9_-]+)/,               // id=FILE_ID
            /\/folders\/([a-zA-Z0-9_-]+)/        // /folders/FOLDER_ID
        ];

        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match && match[1]) return match[1];
        }

        return null; // No ID found
    }
    window.extractDriveId = extractDriveId;
    }
</script>
<script>

    if ('serviceWorker' in navigator && 'PushManager' in window) {
        console.log("here");

        if (Notification.permission !== 'granted') {
            Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                    subscribeForPush();
                } else {
                    console.warn('Push notifications permission denied');
                }
            });
        } else {
            subscribeForPush();
        }
    }
    function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/-/g, '+')
            .replace(/_/g, '/');

        const rawData = atob(base64);
        return new Uint8Array([...rawData].map(c => c.charCodeAt(0)));
    }

    function subscribeForPush() {
        console.log("Starting to Subscribe");
        const vapidPublicKey = 'BHehFUGEHDZdnusscRlrBCKomV2GsjRaLGa3-ZJjUBtUVv4RDFLGex_T9V33QGi5Vfv1O6WHnsgJ-u9cclk0wD4'; // ← this is hardcoded or injected
        document.getElementById('loader').classList.remove('hidden'); // Start loader early

        navigator.serviceWorker.ready
            .then(reg => reg.pushManager.getSubscription().then(existingSubscription => {
                if (existingSubscription) {
                    console.log("Already subscribed");
                    document.getElementById('loader').classList.add('hidden');// Ensure loader is hidden
                    return;
                }

                return reg.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)
                }).then(subscription => {
                    return fetch("/Subscribe", {
                        method: "POST",
                        body: JSON.stringify(subscription),
                        headers: {
                            "Content-Type": "application/json"
                        },
                        credentials: 'include'
                    });
                }).finally(() => {
                    document.getElementById('loader').classList.add('hidden');
                });
            }))
            .catch(err => {
                console.error("Error during push subscription:", err);
                document.getElementById('loader').classList.add('hidden'); // Ensure fallback hide on any error
            });
    }
</script>
<%- include("footer.ejs")%>
</body>

</html>

